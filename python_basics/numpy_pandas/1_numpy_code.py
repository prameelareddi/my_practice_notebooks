# -*- coding: utf-8 -*-
"""1 Numpy Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UW4y69ynCdi0jvrhIfQ79EYXCZMTKZRn

NumPy is the fundamental package for scientific computing with Python. It contains among other things:

NumPy is a python library used for working with arrays.

a powerful N-dimensional array object

sophisticated (broadcasting) functions

useful linear algebra, Fourier transform, and random number capabilities

Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data.

Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases

NumPy aims to provide an array object that is up to 50x faster that traditional Python lists.
"""



import pandas as pd
import numpy as np

arr=np.array([1,2,3])

arr

type(arr)

arr.size # No of elements in the numpy array

arr.shape # Which returns the no of rows and columns

arr1=np.array([1.2,3,4])

arr1

arr1.dtype

arr

arr.itemsize # Size of each element in array

arr.max() # Maximum value in array

arr.min()# Minimum value in array

"""# 2D Array"""

arr3 = np.array([[0, 1, 2], [3, 4, 5]])

arr3

arr3.ndim

len(arr3)

"""# Array Slicing"""

arr4 = np.array(([5,10,15],[20,25,30],[35,40,45]))

arr4

# To just grab a row
arr4[1]

# To grab an individual element
arr4[1][0]

arr4[1,2]

"""arange


which will Return evenly spaced values within a given interval.
"""

np.arange(0,10) # n-1

a = np.arange(15)

a

a.reshape(3,5)

a.size
#a

# Reverse the order of array
a
a[::-3]

"""zeros and ones


Generate arrays of zeros or ones
"""

np.zeros(3)

np.zeros((5,5))

np.ones(3)

# Array with 3 by 3 matrix
np.ones((3,3))

"""# Random

Numpy also has lots of ways to create random number arrays:

rand

Create an array of the given shape and populate it with random samples from a uniform distribution over [0, 1)
"""

np.random.rand(3,2)

np.random.rand(2)

np.random.rand(5,5)

"""max, min, argmax, argmin


These are useful methods for finding max or min values.
"""

M1 = np.arange(20)

M1

M1.max()

M1.min()

arr.argmax()

"""# Array Operations"""

arr1 = np.array([[1,2,3], [8,9,10]])
arr1

# 1. Adding arrays
arr1+arr1

# 2. Multiplying arrays
arr1*arr1

# 3. Subtracting arrays
arr1-arr1

# 4. Dividing arrays (Float return)
arr1/arr1

""" Joining two Arrays"""

import numpy as np

arr1 = np.array([1, 2, 3])

arr2 = np.array([4, 5, 6])

arr = np.concatenate((arr1, arr2))

print(arr)

"""Spliting

Splitting is reverse operation of Joining.
"""

arrs = np.array([1, 2, 3, 4, 5, 6])

newarr = np.array_split(arrs, 3)

print(newarr)

# If the array has less elements than required, it will adjust from the end accordingly.

arrss = np.array([1, 2, 3, 4, 5, 6])

newarr = np.array_split(arrss, 4)

print(newarr)

# Sorting Arrays

import numpy as np

arr5 = np.array([3, 2, 0, 1])

print(np.sort(arr5))

import numpy as np

arr6 = np.array(['banana', 'cherry', 'apple'])

print(np.sort(arr6))

