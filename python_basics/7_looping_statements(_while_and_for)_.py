# -*- coding: utf-8 -*-
"""7 Looping Statements( while and For) .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SkyiRGmlq8NrF5Ot2SG_WT7H8viqMtdD

While

As long as the condition is true, a block of statements under while are executed repeatedly.Once the condition is false,
the loop stops execution and control goes immediate next statement after while block.
"""

a = 1
while a < 6:
    print(a)
    a = a+1

count = 0
while (count < 3):     # when count is 3 then loop will not excute
    count = count + 1
    print("Hello world welcome to DS")

i = 0
s = 'Apple'
while i < len(s): # loop will stop when the value of i is 5
    print(s[i])
    i += 1

"""Break Statement

Using Break Statement we can stop the loop even if the while condition is true:
"""

i = 1
while i < 6:
  print(i)
  if i == 3:
    break
   # print(i)
  i += 1

"""Continue Statement

With the continue statement we can stop the current iteration, and continue with the next:
"""

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

"""while Loop with else

The else part is executed if the condition in the while loop evaluates to False. The while loop can be terminated
with a break statement.
In such case, the else part is ignored. Hence, a while loop's else part runs if no break occurs and the condition is false
"""

i = 1
while i < 6: # value wil false when i = 6
  print(i)
  i += 1
else:
  print("i is no longer less than 6")

"""# FOR Loop

It is used for iterating over a sequence

With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.
"""

# for Loop
for i in range(5):
    print(i)

# print range of numbers from 1 to 20 with step size of 5
for i in range(0, 20, 5): # 0 , 5, 10 ,15,20
    print(i)

"""Looping Through a String

Even strings are iterable objects, they contain a sequence of characters:
"""

for x in "hello":
  print(x)

# With the break statement we can stop the loop before it has looped through all the items:

abc = ["hello", "world", "welcome"]
for x in abc:
  print(x)
  if x == "Data":
    break

#With the continue statement we can stop the current iteration of the loop, and continue with the next:

abc = ["hello", "world", "welcome"]
for x in abc:
  if x == "hello":
    continue
  print(x)

# For Loop using Range Function

for x in range(6):
  print(x)

for x in range(2, 6):
  print(x)

for x in range(4,80,4):
  print(x)

"""Else in For Loop
The else keyword in a for loop specifies a block of code to be executed when the loop is finished:
"""

for x in range(6):
  print(x)
else:
  print("Loop Succes")

# Nested Loops

abc =["hello","world"]
xyz = ["welcome","to","Data","Science"]


for x in abc:

  for y in xyz:

    print(x, y)

a =["Welcom","to","class",2,4]

for b in a:
    print(b)

# Enumerate is function which will assign the index to values

list(enumerate(a))

# will use same in for loop
for index,value in enumerate(a):
    print(index,value)

