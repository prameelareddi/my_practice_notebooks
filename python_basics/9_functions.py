# -*- coding: utf-8 -*-
"""9 Functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QEkyZqr2lwikdXtqde-4qEMXeeVPlTDV

Functions

Function is re usable code


A block of code  which runs only when it is called


A function can return data as Result


def is keyword used to define the function


Syntax for Function

                    def functionName():
        
                        // Code
"""

def hello():
    print("welcome to Data science")
    print("Today class is function")
    print("practise after the class")

# To print the code we can directly use function Name

hello()

def sum():
    a=10
    b=20
    c=a+b
    #print("sum of a and b is 30")

sum()

"""Return Statement

To print anything in function we cannot directly use function name we have to use return Statement

The return statement is used to exit a function and go back to the place from where it was called.

            Syntax:
            return [expression]
            
 Return statement can contain an expression which gets evaluated and the value is returned.




"""

def sum():
    a=10
    b=20
    c=a+b
    return c

sum()

# Return Multple values
def calc():
    a = 10
    b = 20
    c = a+b
    d = a*b
    return c,d

calc()

def word():
    a = "hello"
    b = "world"
    c = a+b
    return c

word()

"""# Arguments

Information can be passed into function as Arguments

Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want,
just separate them with a comma.


"""

def arg(funct):

    #def arg(hello):

  print(funct + " world")

arg("hello")

# when variables should be given while calling the function we can give arguements
def sum(a,b):
    return a+b, a-b

# we can give the values in run time when we are using Arguments method

sum(12,2)

"""# Types of Argument

1) Default Arguments

2) Positional Arguments

3) Reference Arguments

4) Arbitary Arguments

5) Keyword Arguments

# 1) Default Argument

we will provide the defuault value in the function
"""

def my_function(country = "Norway"):
  print("I am from " + country)

#my_function("Sweden")
my_function()

"""# Positional arguments
Arguments that can be called by their position in the function definition.
"""

def test(name, age,city):
    print("name",name)
    print("age",age)
    print("city",city)

test("Mani",25,"Mumbai")

"""# Reference Argument

Reference value will be passed as Argument in function


"""

def ref(n, a,c):
    print("name",n)
    print("age",a)
    print("city",c)

ref(n= "Mani",a= 25,c= "Mumbai")

# c = hyderabad will call as Non Default arguments which should be giving at the end of function
def ref1(n,a,c="Hyderabad"):
    print("Name:",n)
    print("Age:",a)
    print("City:",c)

ref1(n="krish", a=25)

"""# Arbitary Arguments

If you do not know how many keyword arguments that will be passed into your function, add two asterisk:
    *before the parameter name in the function definition.
    
    
"""

def func(*names):
    print(names)

func("kishore","mani","krish")

"""# Keyword Arguments


"""

def Karg(name1,name2,name3):

  print("My name is " + name1)
  print("My name is " + name2)
  print("My name is " + name3)


Karg(name1 =" krish", name2 ="mani", name3 = "Ratna")

"""

kwargs allows you to pass keyworded variable length of arguments to a function.

You should use **kwargs if you want to handle named arguments in a function


"""

def add(**kwargs):
    print (type(kwargs))
    print (kwargs)
add(a=20, b=30, c=40, d=50)

def data(name,**data):
    print("Name",name)
    print("Data:",data)

data("rohan")

data("rohan",age =25)

data("rohan",age =25,city="Hyderabad")

"""# Input function

Its deafult input function that we can use to take the input from the user


"""

inp=input("Enter the number:")

inp

type(inp)

a=input("Please enter a:")

print("Entered Number is:",a)

b=input("Please enter b:")

print("Entered Number is:",b)



