# -*- coding: utf-8 -*-
"""10 File Handling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10JgdOMb418qtk3ZJcxNC4My_l4dPphAJ

# File Handling

The key function for working with files in Python is the open() function.

The open() function takes two parameters; filename, and mode.


"r" - Read - Default value. Opens a file for reading, error if the file does not exist

"a" - Append - Opens a file for appending, creates the file if it does not exist

"w" - Write - Opens a file for writing, creates the file if it does not exist

"x" - Create - Creates the specified file, returns an error if the file exists

"t" - Text - Default value. Text mode

"b" - Binary - Binary mode (e.g. images)

'+' Open a file for updating (reading and writing)
"""

# python will be saving ion Default Path to know the path

# To change the direcory
 #os.chdir(''C:\\Users\\rgandyala\\2. Python Course'')

import os
os.getcwd()

f = open("python.txt") # permission to open the file
f

# Read will be command to read the file which we have opened

test = f.read()

test

# r" - Read - Default value. Opens a file for reading, error if the file does not exist

file1=open("python.txt",mode="r")

data=file1.read()#read data from file

print(data)

# Close is function to name to close the opened files

file1.close()

#Read Only Parts of the File

#we can specify the how many character you want to

f = open("python.txt", "r")
print(f.read(11))

#ReadLines - it will read one line at a time

f = open("file.txt", "r")
print(f.readline())

# If you want to read multiple lines call readline two times

f = open("file.txt", "r")
print(f.readline())
print(f.readline())

"""# Write to an Existing File"""

# "a" - Append - will append to the end of the file

# "w" - Write - will overwrite any existing content

f = open("python.txt", mode="a")

f.write(" Now the file has more content!")

f.close()

f = open("python.txt", mode= "r")

print(f.read())

# "w" - Write - will overwrite any existing content

file2=open("python2.txt",mode="w") # creaet the new file python2.txt

file2.write("this is a new test document which has more content") # write the content and save

file2 = open("python2.txt", mode= "r") # open that newl created file

print(file2.read())  # read the file and print the value

b = open("python.txt", mode="r")
b.read()

# tell method will show the current position - size

b.tell()

#Seek bring the cursor to intial position

b.seek(0)

# Writing to File or creating a file from jupter

f = open("test13.txt", "w")
f.write("This is a First File\n")
f.write("Contains two lines\n")
f.close()

f = open("test13.txt",mode="r")

f.read()

# \n Indicate the new line in the file
f.close()



file1=open("data.txt",mode="r+")
data=file1.read()#read data from file
# print the data
print(data)
# Read the file and update the sentence
file1.write("this test for2 r+")
file1.close()

data

"""# Renaming And Deleting Files In Python.

"""

# Renaming File

import os

os.rename("data.txt","NewData.txt")

os.rename("NewData.txt","data.txt")

# Removing File

# we can remove the files which are closed - Opened files we cannot remove.
# To remove the files we use code of f.close()
os.remove("test.txt")

"""Python Directory"""

os.getcwd()

# Change the Directory with Chdir command and providing path

os.chdir("/users/filenae")

"""List Directories and Files
All files and sub directories inside a directory can be known using the listdir() method.

"""

os.listdir(os.getcwd())

"""Making New Directory

We can make a new directory using the mkdir() method.

This method takes in the path of the new directory.

If the full path is not specified, the new directory is created in the current working directory.

"""

os.mkdir('test')

"""Remove Directory

rmdir() method can only remove empty directories.

In order to remove a non-empty directory we can use the rmtree() method inside the shutil module.

"""

os.rmdir('test')

import pandas as pd
pd.read_CSV("path")

